#!/bin/bash



### LIST FUNCTIONS

# List all nodes
LIST_NODES()
{
	echo $(bspc query -N -d)
}

# List leafs nodes
LIST_LEAFS()
{
	NODES=$(LIST_NODES)
	RES=''

	for loop in $NODES; do
		# If has another nodes inside
		INTER_INFO=$(bspc query -T -n $loop | awk '/"firstChild":{"id"/')

		# If is a leaf node
		if [ "$INTER_INFO" == '' ]; then

			if [ "$RES" == '' ]; then # First assignment
				RES=$loop

			else                      # Others assignment
				RES+=" $loop"
			fi

		fi
	done

	# Return the nodes
	echo $RES
}

# List internal nodes
LIST_INTER()
{
	NODES=$(LIST_NODES)
	RES=''

	for loop in $NODES; do
		# If has another nodes inside
		INTER_INFO=$(bspc query -T -n $loop | awk '/"firstChild":{"id"/')

		# If is a internal node
		if [ "$INTER_INFO" != '' ]; then

			if [ "$RES" == '' ]; then # First assignment
				RES=$loop                                 
                                                          
			else                      # Others assignment
				RES+=" $loop"
			fi

		fi
	done

	# Return the nodes
	echo $RES
}



### LEAFS VARIABLES

declare ALL_LEAFS
declare -i LEAFS_NUMBER

# Update leafs values
UPDATE_LEAFS()
{
	ALL_LEAFS=`LIST_LEAFS`
	LEAFS_NUMBER=$(echo $ALL_LEAFS | wc -w)
}



### RETURN NUMBER OF NODES FUNCTIONS

# Return the number of nodes
NODES_COUNT()
{
	LIST_NODES | wc -w
}

# Return the number of leaf nodes
LEAFS_COUNT()
{
	echo $LEAFS_NUMBER
}

# Return the number of internal nodes
INTER_COUNT()
{
	LIST_INTER | wc -w
}



### RETURN NODES FUNCTIONS

# Return the $1 node
RETURN_NODE()
{
	echo "$(LIST_NODES) " | cut -d' ' -f$1
}

# Return the $1 leaf node
RETURN_LEAFS()
{
	echo "$ALL_LEAFS " | cut -d' ' -f$1
}

# Return the $1 internal node
RETURN_INTER()
{
	NODES=$(LIST_NODES)
	declare -i NUM=$1

	for loop in $NODES; do
		# If has another nodes inside
		INTER_INFO=$(bspc query -T -n $loop | awk '/"firstChild":{"id"/')

		# If is a internal node
		if [ "$INTER_INFO" != '' ]; then
			NUM=${NUM}-1

			# If is the $1 internal node
			if [ $NUM == 0 ]; then
				echo $loop
				break
			fi
		fi
	done
}



### INFO FUNCTIONS

# Get the $2 value of $1 node
NODE_INFO()
{
	bspc query -T -n $1 | sed -e 's/,/\n/g' | awk "/$2/" | cut -d':' -f2 | sed 's/\"//g' | sed -n '1p'

}



### ORGANIZATION FUNCTIONS

# Move leaf $1 to $2
MOVE_LEAF()
{
	bspc node $1 -n $2
}

# Swap the leaf $1 with the $2
SWAP_LEAF()
{
	bspc node $1 -s $2
}

# Set the splitType of the node $1
SET_SPLIT_TYPE()
{
	# Check the $2 parameter
	if [ "$2" != 'horizontal' -a "$2" != 'vertical' ]; then
		echo -e "Invalid SPLIT_TYPE"

	# Set the splitType
	elif [ "$(NODE_INFO $1 splitType)" != "$2" ]; then
		bspc node $1 -R 90
	fi
}

# Organize all nodes in a basic layout
BASIC_ORGANIZE()
{
	# Save 'automatic_scheme' and exchange to 'longest_side'
	AUTO_SCHEME=$(bspc config automatic_scheme)
	bspc config automatic_scheme longest_side

	# Move all leafs nodes to the first internal node
	for loop in $ALL_LEAFS; do
		bspc node $loop -n $(bspc query -N -d | sed -n '1p')
	done

	# Load 'automatic_scheme'
	bspc config automatic_scheme $AUTO_SCHEME
}



### DEBUG FUNCTIONS

# Focus on nodes
SHOW_NODES()
{
	for loop in $(LIST_NODES); do
		bspc node -f $loop
		sleep '0.5'
	done
}

# Focus on internal nodes
SHOW_INTER()
{
	for loop in $(LIST_INTER); do
		bspc node -f $loop
		sleep '0.5'
	done
}

# Focus on leafs nodes
SHOW_LEAFS()
{
	for loop in $(LIST_LEAFS); do
		bspc node -f $loop
		sleep '0.5'
	done
}


# vim: nobackup
