#!/bin/bash

############ EDGE PROMPT ############

# Make to be used with Bash



# Prompt commander number
declare -i PROMPT_COMMAND_NUMBER=0

# Generate PS1 Variable
PROMPT_COMMAND='PROMPT_REFRESH $?'



# Update git prompt tool
UPDATE_GIT_ARCHIVES_PROMPT()
{
	if [ "_$(git status -s 2> /dev/null)" != '_' -o "_$(git stash list)" != "_" ]; then
		echo "…$UNTRACKED +$MODIFIED ×$DELETED  •$STAGED ➤+$MODIFIED_STAGED ➤×$DELETED_STAGED  $UNMERGED ⚑ $STASHED_ENTRIES "
	else
		echo '✔ '
	fi
}


# Update prompt
PROMPT_REFRESH()
{
	# Variables
	local MAIN_PROMPT
	local RIGHT_PROMPT
	local WORKING_DIRECTORY
	local ERROR_PROMPT
	local END_PROMPT

	local PROMPT_INFO_1
	local PROMPT_INFO_2
	local PROMPT_INFO_3

	local SPACES_NUMBER=''

	local -i PROMPT_WIDTH=0


	# Main prompt
	MAIN_PROMPT='\
\[\033[38;5;${CHAR_COLOR_1}m\]\[\033[48;5;${BACK_COLOR_1}m\] \
\[\033[38;5;${CHAR_COLOR_2}m\] \s \
\[\033[38;5;${BACK_COLOR_1}m\]\[\033[48;5;${BACK_COLOR_2}m\]\
\[\033[38;5;${CHAR_COLOR_3}m\] \u \
\[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_2}m\]'

	# Update PROMPT_WIDTH
	PROMPT_WIDTH+=13
	PROMPT_WIDTH+=$(echo -n $USER | wc -c)


	# WORKING_DIRECTORY and ERROR_PROMPT
	if [ "$1" != 0 ]; then       # An error occurred
		WORKING_DIRECTORY='\[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_ERROR}m\]\[\033[48;5;${BACK_COLOR_ERROR}m\]\[\033[38;5;${CHAR_COLOR_ERROR}m\] \w \[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_ERROR}m\]\[$(tput sgr0)\]'
		ERROR_PROMPT='\[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_ERROR}m\]Error Code: '${1}'\[$(tput sgr0)\]\n'

		# Update PROMPT_WIDTH
		PROMPT_WIDTH+=9
	else                         # An error didn't occur
		WORKING_DIRECTORY=' \[$(tput sgr0)\]\[\033[38;5;${CHAR_COLOR_4}m\]\w'
		ERROR_PROMPT=''

		# Update PROMPT_WIDTH
		PROMPT_WIDTH+=6
	fi

	# Update PROMPT_WIDTH
	PROMPT_WIDTH+=$(pwd | sed "s/^\\/home\\/$USER/~/"| wc -c)-1


	# Git tool prompts
	ls '.git/' 2> '/dev/null' > '/dev/null' &&
	{
		# Include GIT TOOLS FOR BASH
		source $HOME'/.bash/tools/git'

		# Make the git integration prompt
		PROMPT_INFO_1=" $BRANCH "
		PROMPT_INFO_2="`UPDATE_GIT_ARCHIVES_PROMPT`"

		# Add branch tracking identification
		if [ "$BRANCH_AHEAD" = 'L' ]; then
			PROMPT_INFO_1+='L'

		elif [ "$BRANCH_AHEAD" -gt 0 ]; then
			PROMPT_INFO_1+="🢙${BRANCH_AHEAD}"

		elif [ "$BRANCH_AHEAD" -lt 0 ]; then
			PROMPT_INFO_1+="🢛${BRANCH_AHEAD}"
		fi

		# Update PROMPT_WIDTH
		PROMPT_WIDTH+=$(echo -n "${PROMPT_INFO_1}${PROMPT_INFO_2}" | wc -c)-5-21+9

		# Format the prompt
		PROMPT_INFO_1=\
' \[\033[38;5;${BACK_COLOR_GIT}m\]\[\033[38;5;${CHAR_COLOR_GIT}m\]\[\033[48;5;${BACK_COLOR_GIT}m\] '\
"$PROMPT_INFO_1"\
' \[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_GIT}m\]\[$(tput sgr0)\]'

		PROMPT_INFO_2=\
'   \[\033[38;5;${BACK_COLOR_GIT}m\]\[\033[38;5;${CHAR_COLOR_GIT}m\]\[\033[48;5;${BACK_COLOR_GIT}m\] '\
"$PROMPT_INFO_2"\
' \[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_GIT}m\]\[$(tput sgr0)\]'


		# Change the git integration tools colors
		if [ "$(git status -s)" != '' -o "$(git stash list)" != "" ]; then
			BACK_COLOR_GIT=$BACK_COLOR_GIT_UNDONE
			CHAR_COLOR_GIT=$CHAR_COLOR_GIT_UNDONE
		else
			PROMPT_INFO_2=''
			BACK_COLOR_GIT=$BACK_COLOR_GIT_DONE
			CHAR_COLOR_GIT=$CHAR_COLOR_GIT_DONE
		fi
	} ||
	{
		PROMPT_INFO_1=''
		PROMPT_INFO_2=''
	}


	# Right Floating Prompt
	PROMPT_WIDTH+=25                            # Add 25 tolerance columns
	PROMPT_COMMAND_NUMBER+=1

	if [ "$PROMPT_WIDTH" -lt "$COLUMNS" ]; then # If there is space for right prompt

		# RIGHT_PROMPT columns offset
		local -i REPETITIONS=${COLUMNS}-$(echo ${PROMPT_COMMAND_NUMBER} | wc -c)-18
		local -i loop1
		for (( loop1=0; loop1<${REPETITIONS}; loop1++ )); do
			SPACES_NUMBER+=" "
		done

		# RIGHT_PROMPT in the right
		RIGHT_PROMPT='\
\[$(tput sgr0)\]'\
"${SPACES_NUMBER}"'\
\[\033[38;5;${BACK_COLOR_3}m\]\
\[\033[48;5;${BACK_COLOR_3}m\]\[\033[38;5;${CHAR_COLOR_5}m\] \j \
\[\033[38;5;${BACK_COLOR_4}m\]\[\033[48;5;${BACK_COLOR_4}m\]\
\[\033[38;5;${CHAR_COLOR_6}m\] ${PROMPT_COMMAND_NUMBER} \
\[\033[38;5;${BACK_COLOR_5}m\]\[\033[48;5;${BACK_COLOR_5}m\] \
\[\033[38;5;${CHAR_COLOR_7}m\] \@ \
\[$(tput sgr0)\]\r'

	else                                        # If there isn't space for right prompt

		# RIGHT_PROMPT columns offset
		local -i REPETITIONS=(${COLUMNS}/2)-10
		local -i loop1
		for (( loop1=0; loop1<${REPETITIONS}; loop1++ )); do
			SPACES_NUMBER+=" "
		done

		# RIGHT_PROMPT in the middle
		RIGHT_PROMPT='\
\[$(tput sgr0)\]'\
"${SPACES_NUMBER}"'\
\[\033[38;5;${BACK_COLOR_3}m\]\
\[\033[48;5;${BACK_COLOR_3}m\]\[\033[38;5;${CHAR_COLOR_5}m\] \j \
\[\033[38;5;${BACK_COLOR_4}m\]\[\033[48;5;${BACK_COLOR_4}m\]\
\[\033[38;5;${CHAR_COLOR_6}m\] \@ \
\[\033[38;5;${BACK_COLOR_4}m\]\[\033[48;5;${BACK_COLOR_5}m\]\[\033[48;5;${BACK_COLOR_5}m\] \
\[\033[38;5;${CHAR_COLOR_7}m\] ${PROMPT_COMMAND_NUMBER} \
\[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_5}m\]\
\[$(tput sgr0)\]\n\n'

	fi


	# End Prompt
	END_PROMPT='\
\[\033[48;5;${BACK_COLOR_6}m\] \[$(tput sgr0)\]\[\033[38;5;${BACK_COLOR_6}m\]\
\[$(tput sgr0)\]\[\033[38;5;${CHAR_COLOR_8}m\] \$:  \
\[$(tput sgr0)\]\
'

	# Export final Prompt
	export PS1="\
\n\n${RIGHT_PROMPT}\
${MAIN_PROMPT}  \
${WORKING_DIRECTORY}  \
${PROMPT_INFO_1}\
${PROMPT_INFO_2}\
\n\
${ERROR_PROMPT}\
\n\
${END_PROMPT}\
${TEXT_COLOR}"
}


# Another prompt Variables
export PS2="\[\033[48;5;${BACK_COLOR_6}m\]  \[$(tput sgr0)\]    "

export PS4="\[\033[48;5;${BACK_COLOR_6}m\]  \[$(tput sgr0)\]    "
